"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _axios = _interopRequireDefault(require("axios"));

var _swr = _interopRequireDefault(require("swr"));

var _spacetime = _interopRequireDefault(require("spacetime"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _deployStatus = _interopRequireDefault(require("./deploy-status"));

var _deployHistory = _interopRequireDefault(require("./deploy-history"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var fetcher = function fetcher(url, token) {
  return _axios["default"].get(url, {
    headers: {
      'content-type': 'application/json',
      Authorization: "Bearer ".concat(token)
    }
  }).then(function (res) {
    return res.data;
  });
};

var deployItem = function deployItem(_ref) {
  var _deploymentData$deplo;

  var name = _ref.name,
      url = _ref.url,
      id = _ref.id,
      vercelProject = _ref.vercelProject,
      vercelToken = _ref.vercelToken,
      vercelTeam = _ref.vercelTeam;

  var client = _client["default"].withConfig({
    apiVersion: '2021-03-25'
  });

  var _useState = (0, _react.useState)(true),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isLoading = _useState2[0],
      setIsLoading = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      isDeploying = _useState4[0],
      setDeploying = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      isHistoryOpen = _useState6[0],
      setIsHistoryOpen = _useState6[1];

  var _useState7 = (0, _react.useState)(null),
      _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
      errorMessage = _useState8[0],
      setErrorMessage = _useState8[1];

  var _useState9 = (0, _react.useState)('LOADING'),
      _useState10 = (0, _slicedToArray2["default"])(_useState9, 2),
      status = _useState10[0],
      setStatus = _useState10[1];

  var _useState11 = (0, _react.useState)(null),
      _useState12 = (0, _slicedToArray2["default"])(_useState11, 2),
      timestamp = _useState12[0],
      setTimestamp = _useState12[1];

  var _useState13 = (0, _react.useState)(null),
      _useState14 = (0, _slicedToArray2["default"])(_useState13, 2),
      buildTime = _useState14[0],
      setBuildTime = _useState14[1];

  var toast = (0, _ui.useToast)();

  var _useSWR = (0, _swr["default"])(["https://api.vercel.com/v8/projects/".concat(vercelProject).concat(vercelTeam !== null && vercelTeam !== void 0 && vercelTeam.id ? "?teamId=".concat(vercelTeam === null || vercelTeam === void 0 ? void 0 : vercelTeam.id) : ''), vercelToken], function (url, token) {
    return fetcher(url, token);
  }, {
    errorRetryCount: 3,
    onError: function onError(err) {
      var _err$response, _err$response$data, _err$response$data$er;

      var errorMessage = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : (_err$response$data$er = _err$response$data.error) === null || _err$response$data$er === void 0 ? void 0 : _err$response$data$er.message;
      setStatus('ERROR');
      setErrorMessage(errorMessage);
      setIsLoading(false);
    }
  }),
      projectData = _useSWR.data;

  var _useSWR2 = (0, _swr["default"])(function () {
    return ["https://api.vercel.com/v5/now/deployments?projectId=".concat(projectData.id, "&meta-deployHookId=").concat(url.split('/').pop(), "&limit=1").concat(vercelTeam !== null && vercelTeam !== void 0 && vercelTeam.id ? "&teamId=".concat(vercelTeam === null || vercelTeam === void 0 ? void 0 : vercelTeam.id) : ''), vercelToken];
  }, function (url, token) {
    return fetcher(url, token);
  }, {
    errorRetryCount: 3,
    refreshInterval: isDeploying ? 5000 : 0,
    onError: function onError(err) {
      var _err$response2, _err$response2$data, _err$response2$data$e;

      var errorMessage = (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : (_err$response2$data$e = _err$response2$data.error) === null || _err$response2$data$e === void 0 ? void 0 : _err$response2$data$e.message;
      setStatus('ERROR');
      setErrorMessage(errorMessage);
      setIsLoading(false);
    }
  }),
      deploymentData = _useSWR2.data;

  var onDeploy = function onDeploy(name, url) {
    setStatus('INITIATED');
    setDeploying(true);
    setTimestamp(null);
    setBuildTime(null);

    _axios["default"].post(url).then(function (res) {
      toast.push({
        status: 'success',
        title: 'Success!',
        description: "Triggered Deployment: ".concat(name)
      });
    })["catch"](function (err) {
      setDeploying(false);
      toast.push({
        status: 'error',
        title: 'Deploy Failed.',
        description: "".concat(err)
      });
    });
  };

  var onCancel = function onCancel(id, token) {
    setIsLoading(true);

    _axios["default"].patch("https://api.vercel.com/v12/deployments/".concat(id, "/cancel"), null, {
      headers: {
        'content-type': 'application/json',
        Authorization: "Bearer ".concat(token)
      }
    }).then(function (res) {
      return res.data;
    }).then(function (res) {
      setStatus('CANCELED');
      setDeploying(false);
      setIsLoading(false);
      setBuildTime(null);
      setTimestamp(res.canceledAt);
    });
  };

  var onRemove = function onRemove(name, id) {
    setIsLoading(true);
    client["delete"](id).then(function (res) {
      toast.push({
        status: 'success',
        title: "Successfully deleted deployment: ".concat(name)
      });
    });
  }; // set status when new deployment data comes in


  (0, _react.useEffect)(function () {
    var isSubscribed = true;

    if (deploymentData !== null && deploymentData !== void 0 && deploymentData.deployments && isSubscribed) {
      var latestDeployment = deploymentData.deployments[0];
      setStatus((latestDeployment === null || latestDeployment === void 0 ? void 0 : latestDeployment.state) || 'READY');

      if (latestDeployment !== null && latestDeployment !== void 0 && latestDeployment.created) {
        setTimestamp(latestDeployment === null || latestDeployment === void 0 ? void 0 : latestDeployment.created);
      }

      setIsLoading(false);
    }

    return function () {
      return isSubscribed = false;
    };
  }, [deploymentData]); // update deploy state after status is updated

  (0, _react.useEffect)(function () {
    var isSubscribed = true;

    if (isSubscribed) {
      if (status === 'READY' || status === 'ERROR' || status === 'CANCELED') {
        setDeploying(false);
      } else if (status === 'BUILDING' || status === 'INITIATED') {
        setDeploying(true);
      }
    }

    return function () {
      return isSubscribed = false;
    };
  }, [status]); // count build time

  var tick = function tick(timestamp) {
    if (timestamp) {
      setBuildTime(_spacetime["default"].now().since((0, _spacetime["default"])(timestamp)).rounded);
    }
  };

  (0, _react.useEffect)(function () {
    var isTicking = true;
    var timer = setInterval(function () {
      if (isTicking && isDeploying) {
        tick(timestamp);
      }
    }, 1000);

    if (!isDeploying) {
      clearInterval(timer);
    }

    return function () {
      isTicking = false;
      clearInterval(timer);
    };
  }, [timestamp, isDeploying]);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_ui.Flex, {
    align: "center"
  }, /*#__PURE__*/_react["default"].createElement(_ui.Box, {
    flex: 1,
    paddingBottom: 1
  }, /*#__PURE__*/_react["default"].createElement(_ui.Stack, {
    space: 2
  }, /*#__PURE__*/_react["default"].createElement(_ui.Inline, {
    space: 2
  }, /*#__PURE__*/_react["default"].createElement(_ui.Heading, {
    as: "h2",
    size: 1
  }, /*#__PURE__*/_react["default"].createElement(_ui.Text, {
    weight: "semibold"
  }, name)), /*#__PURE__*/_react["default"].createElement(_ui.Badge, {
    tone: "primary",
    paddingX: 3,
    paddingY: 2,
    radius: 6,
    fontSize: 0
  }, vercelProject), (vercelTeam === null || vercelTeam === void 0 ? void 0 : vercelTeam.id) && /*#__PURE__*/_react["default"].createElement(_ui.Badge, {
    mode: "outline",
    paddingX: 3,
    paddingY: 2,
    radius: 6,
    fontSize: 0
  }, vercelTeam === null || vercelTeam === void 0 ? void 0 : vercelTeam.name)), /*#__PURE__*/_react["default"].createElement(_ui.Code, {
    size: 1
  }, /*#__PURE__*/_react["default"].createElement(_ui.Box, {
    style: {
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis'
    }
  }, url)))), /*#__PURE__*/_react["default"].createElement(_ui.Flex, {
    wrap: "nowrap",
    align: "center",
    marginLeft: 4
  }, /*#__PURE__*/_react["default"].createElement(_ui.Inline, {
    space: 2
  }, vercelToken && vercelProject && /*#__PURE__*/_react["default"].createElement(_ui.Box, {
    marginRight: 2
  }, /*#__PURE__*/_react["default"].createElement(_ui.Stack, {
    space: 2
  }, /*#__PURE__*/_react["default"].createElement(_deployStatus["default"], {
    status: status,
    justify: "flex-end"
  }, errorMessage && /*#__PURE__*/_react["default"].createElement(_ui.Box, {
    marginLeft: 2
  }, /*#__PURE__*/_react["default"].createElement(_ui.Tooltip, {
    content: /*#__PURE__*/_react["default"].createElement(_ui.Box, {
      padding: 2
    }, /*#__PURE__*/_react["default"].createElement(_ui.Text, {
      muted: true,
      size: 1
    }, errorMessage)),
    placement: "top"
  }, /*#__PURE__*/_react["default"].createElement(_ui.Badge, {
    mode: "outline",
    tone: "critical"
  }, "?")))), /*#__PURE__*/_react["default"].createElement(_ui.Text, {
    align: "right",
    size: 1,
    muted: true
  }, isDeploying ? buildTime || '--' : timestamp ? _spacetime["default"].now().since((0, _spacetime["default"])(timestamp)).rounded : '--'))), /*#__PURE__*/_react["default"].createElement(_ui.Button, {
    type: "button",
    tone: "positive",
    disabled: isDeploying || isLoading,
    loading: isDeploying || isLoading,
    onClick: function onClick() {
      return onDeploy(name, url);
    },
    radius: 3,
    text: "Deploy"
  }), isDeploying && (status === 'BUILDING' || status === 'QUEUED') && /*#__PURE__*/_react["default"].createElement(_ui.Button, {
    type: "button",
    tone: "critical",
    onClick: function onClick() {
      return onCancel(deploymentData.deployments[0].uid, vercelToken);
    },
    radius: 3,
    text: "Cancel"
  }), /*#__PURE__*/_react["default"].createElement(_ui.MenuButton, {
    button: /*#__PURE__*/_react["default"].createElement(_ui.Button, {
      mode: "bleed",
      icon: _icons.EllipsisVerticalIcon,
      disabled: isDeploying || isLoading
    }),
    portal: true,
    menu: /*#__PURE__*/_react["default"].createElement(_ui.Menu, null, /*#__PURE__*/_react["default"].createElement(_ui.MenuItem, {
      text: "History",
      icon: _icons.ClockIcon,
      onClick: function onClick() {
        return setIsHistoryOpen(true);
      },
      disabled: !(deploymentData !== null && deploymentData !== void 0 && deploymentData.deployments.length)
    }), /*#__PURE__*/_react["default"].createElement(_ui.MenuItem, {
      text: "Delete",
      icon: _icons.TrashIcon,
      tone: "critical",
      onClick: function onClick() {
        return onRemove(name, id);
      }
    })),
    placement: "bottom-end"
  })))), isHistoryOpen && /*#__PURE__*/_react["default"].createElement(_ui.Dialog, {
    id: "deploy-history",
    header: "Deployment History: ".concat(name),
    onClickOutside: function onClickOutside() {
      return setIsHistoryOpen(false);
    },
    onClose: function onClose() {
      return setIsHistoryOpen(false);
    },
    width: 2
  }, /*#__PURE__*/_react["default"].createElement(_deployHistory["default"], {
    url: url,
    vercelProject: projectData.id,
    vercelToken: vercelToken,
    vercelTeam: vercelTeam,
    hookContext: deploymentData === null || deploymentData === void 0 ? void 0 : (_deploymentData$deplo = deploymentData.deployments[0]) === null || _deploymentData$deplo === void 0 ? void 0 : _deploymentData$deplo.meta.deployHookName
  })));
};

var _default = deployItem;
exports["default"] = _default;